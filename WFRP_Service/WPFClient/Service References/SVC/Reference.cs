//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFClient.SVC {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerMessage", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class ServerMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStatusCorrectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPFClient.SVC.ServerMessageType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStatusCorrect {
            get {
                return this.IsStatusCorrectField;
            }
            set {
                if ((this.IsStatusCorrectField.Equals(value) != true)) {
                    this.IsStatusCorrectField = value;
                    this.RaisePropertyChanged("IsStatusCorrect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPFClient.SVC.ServerMessageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerMessageType", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum ServerMessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connect = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisconnectInfoClient = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Register = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Login = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartSession = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Identity", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Identity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountIDField, value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPFClient.SVC.Client))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPFClient.SVC.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPFClient.SVC.ServerMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPFClient.SVC.ServerMessageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPFClient.SVC.Identity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<WPFClient.SVC.Client, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Bitmap))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Drawing.Image))]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.KeyValuePair<WPFClient.SVC.Client, object> MGField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<WPFClient.SVC.Client, object> MembersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.KeyValuePair<WPFClient.SVC.Client, object> MG {
            get {
                return this.MGField;
            }
            set {
                if ((this.MGField.Equals(value) != true)) {
                    this.MGField = value;
                    this.RaisePropertyChanged("MG");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<WPFClient.SVC.Client, object> Members {
            get {
                return this.MembersField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersField, value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SVC.IWFRP", CallbackContract=typeof(WPFClient.SVC.IWFRPCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IWFRP {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWFRP/Initialize", ReplyAction="http://tempuri.org/IWFRP/InitializeResponse")]
        bool Initialize();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWFRP/Initialize", ReplyAction="http://tempuri.org/IWFRP/InitializeResponse")]
        System.IAsyncResult BeginInitialize(System.AsyncCallback callback, object asyncState);
        
        bool EndInitialize(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/Disconnect")]
        void Disconnect(WPFClient.SVC.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/Disconnect")]
        System.IAsyncResult BeginDisconnect(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState);
        
        void EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/Register")]
        void Register(WPFClient.SVC.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/Register")]
        System.IAsyncResult BeginRegister(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/LogIn")]
        void LogIn(WPFClient.SVC.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/LogIn")]
        System.IAsyncResult BeginLogIn(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState);
        
        void EndLogIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/StartSession")]
        void StartSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/StartSession")]
        System.IAsyncResult BeginStartSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, System.AsyncCallback callback, object asyncState);
        
        void EndStartSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/GetAllClients")]
        void GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/GetAllClients")]
        System.IAsyncResult BeginGetAllClients(System.AsyncCallback callback, object asyncState);
        
        void EndGetAllClients(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/EndSession")]
        void EndSession(WPFClient.SVC.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/EndSession")]
        System.IAsyncResult BeginEndSession(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState);
        
        void EndEndSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/Send")]
        void Send(WPFClient.SVC.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/Send")]
        System.IAsyncResult BeginSend(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndSend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/Whisper")]
        void Whisper(WPFClient.SVC.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/Whisper")]
        System.IAsyncResult BeginWhisper(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndWhisper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/AddMemberToSession")]
        void AddMemberToSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/AddMemberToSession")]
        System.IAsyncResult BeginAddMemberToSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, System.AsyncCallback callback, object asyncState);
        
        void EndAddMemberToSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/UpdateParchment")]
        void UpdateParchment(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/UpdateParchment")]
        System.IAsyncResult BeginUpdateParchment(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateParchment(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWFRPCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/GetServerMessageStatus")]
        void GetServerMessageStatus(WPFClient.SVC.ServerMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/GetServerMessageStatus")]
        System.IAsyncResult BeginGetServerMessageStatus(WPFClient.SVC.ServerMessage msg, System.AsyncCallback callback, object asyncState);
        
        void EndGetServerMessageStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/GetIdentity")]
        void GetIdentity(WPFClient.SVC.Identity userID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/GetIdentity")]
        System.IAsyncResult BeginGetIdentity(WPFClient.SVC.Identity userID, System.AsyncCallback callback, object asyncState);
        
        void EndGetIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/SetClientList")]
        void SetClientList(System.Collections.Generic.List<string> clients);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/SetClientList")]
        System.IAsyncResult BeginSetClientList(System.Collections.Generic.List<string> clients, System.AsyncCallback callback, object asyncState);
        
        void EndSetClientList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/JoinedToSession")]
        void JoinedToSession(WPFClient.SVC.ServerMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/JoinedToSession")]
        System.IAsyncResult BeginJoinedToSession(WPFClient.SVC.ServerMessage msg, System.AsyncCallback callback, object asyncState);
        
        void EndJoinedToSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/SessionInitSettings")]
        void SessionInitSettings(WPFClient.SVC.Session session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/SessionInitSettings")]
        System.IAsyncResult BeginSessionInitSettings(WPFClient.SVC.Session session, System.AsyncCallback callback, object asyncState);
        
        void EndSessionInitSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/SetSessionList")]
        void SetSessionList(System.Collections.Generic.List<string> clients, WPFClient.SVC.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/SetSessionList")]
        System.IAsyncResult BeginSetSessionList(System.Collections.Generic.List<string> clients, WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndSetSessionList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/Receive")]
        void Receive(WPFClient.SVC.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/Receive")]
        System.IAsyncResult BeginReceive(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndReceive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/ReceiveWhisper")]
        void ReceiveWhisper(WPFClient.SVC.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/ReceiveWhisper")]
        System.IAsyncResult BeginReceiveWhisper(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState);
        
        void EndReceiveWhisper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/SessionInitMGSettings")]
        void SessionInitMGSettings(WPFClient.SVC.Session session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/SessionInitMGSettings")]
        System.IAsyncResult BeginSessionInitMGSettings(WPFClient.SVC.Session session, System.AsyncCallback callback, object asyncState);
        
        void EndSessionInitMGSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWFRP/ReceivePerchment")]
        void ReceivePerchment(System.Drawing.Bitmap bmp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IWFRP/ReceivePerchment")]
        System.IAsyncResult BeginReceivePerchment(System.Drawing.Bitmap bmp, System.AsyncCallback callback, object asyncState);
        
        void EndReceivePerchment(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWFRPChannel : WPFClient.SVC.IWFRP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InitializeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InitializeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WFRPClient : System.ServiceModel.DuplexClientBase<WPFClient.SVC.IWFRP>, WPFClient.SVC.IWFRP {
        
        private BeginOperationDelegate onBeginInitializeDelegate;
        
        private EndOperationDelegate onEndInitializeDelegate;
        
        private System.Threading.SendOrPostCallback onInitializeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogInDelegate;
        
        private EndOperationDelegate onEndLogInDelegate;
        
        private System.Threading.SendOrPostCallback onLogInCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartSessionDelegate;
        
        private EndOperationDelegate onEndStartSessionDelegate;
        
        private System.Threading.SendOrPostCallback onStartSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllClientsDelegate;
        
        private EndOperationDelegate onEndGetAllClientsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllClientsCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndSessionDelegate;
        
        private EndOperationDelegate onEndEndSessionDelegate;
        
        private System.Threading.SendOrPostCallback onEndSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendDelegate;
        
        private EndOperationDelegate onEndSendDelegate;
        
        private System.Threading.SendOrPostCallback onSendCompletedDelegate;
        
        private BeginOperationDelegate onBeginWhisperDelegate;
        
        private EndOperationDelegate onEndWhisperDelegate;
        
        private System.Threading.SendOrPostCallback onWhisperCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMemberToSessionDelegate;
        
        private EndOperationDelegate onEndAddMemberToSessionDelegate;
        
        private System.Threading.SendOrPostCallback onAddMemberToSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateParchmentDelegate;
        
        private EndOperationDelegate onEndUpdateParchmentDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateParchmentCompletedDelegate;
        
        public WFRPClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WFRPClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WFRPClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WFRPClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WFRPClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<InitializeCompletedEventArgs> InitializeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogInCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetAllClientsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EndSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WhisperCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMemberToSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateParchmentCompleted;
        
        public bool Initialize() {
            return base.Channel.Initialize();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInitialize(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInitialize(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInitialize(System.IAsyncResult result) {
            return base.Channel.EndInitialize(result);
        }
        
        private System.IAsyncResult OnBeginInitialize(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInitialize(callback, asyncState);
        }
        
        private object[] OnEndInitialize(System.IAsyncResult result) {
            bool retVal = this.EndInitialize(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInitializeCompleted(object state) {
            if ((this.InitializeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InitializeCompleted(this, new InitializeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InitializeAsync() {
            this.InitializeAsync(null);
        }
        
        public void InitializeAsync(object userState) {
            if ((this.onBeginInitializeDelegate == null)) {
                this.onBeginInitializeDelegate = new BeginOperationDelegate(this.OnBeginInitialize);
            }
            if ((this.onEndInitializeDelegate == null)) {
                this.onEndInitializeDelegate = new EndOperationDelegate(this.OnEndInitialize);
            }
            if ((this.onInitializeCompletedDelegate == null)) {
                this.onInitializeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInitializeCompleted);
            }
            base.InvokeAsync(this.onBeginInitializeDelegate, null, this.onEndInitializeDelegate, this.onInitializeCompletedDelegate, userState);
        }
        
        public void Disconnect(WPFClient.SVC.Client client) {
            base.Channel.Disconnect(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnect(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisconnect(System.IAsyncResult result) {
            base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            return this.BeginDisconnect(client, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            this.EndDisconnect(result);
            return null;
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(WPFClient.SVC.Client client) {
            this.DisconnectAsync(client, null);
        }
        
        public void DisconnectAsync(WPFClient.SVC.Client client, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        client}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        public void Register(WPFClient.SVC.Client client) {
            base.Channel.Register(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegister(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            return this.BeginRegister(client, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            this.EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(WPFClient.SVC.Client client) {
            this.RegisterAsync(client, null);
        }
        
        public void RegisterAsync(WPFClient.SVC.Client client, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        client}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        public void LogIn(WPFClient.SVC.Client client) {
            base.Channel.LogIn(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogIn(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogIn(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogIn(System.IAsyncResult result) {
            base.Channel.EndLogIn(result);
        }
        
        private System.IAsyncResult OnBeginLogIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            return this.BeginLogIn(client, callback, asyncState);
        }
        
        private object[] OnEndLogIn(System.IAsyncResult result) {
            this.EndLogIn(result);
            return null;
        }
        
        private void OnLogInCompleted(object state) {
            if ((this.LogInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogInCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogInAsync(WPFClient.SVC.Client client) {
            this.LogInAsync(client, null);
        }
        
        public void LogInAsync(WPFClient.SVC.Client client, object userState) {
            if ((this.onBeginLogInDelegate == null)) {
                this.onBeginLogInDelegate = new BeginOperationDelegate(this.OnBeginLogIn);
            }
            if ((this.onEndLogInDelegate == null)) {
                this.onEndLogInDelegate = new EndOperationDelegate(this.OnEndLogIn);
            }
            if ((this.onLogInCompletedDelegate == null)) {
                this.onLogInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogInCompleted);
            }
            base.InvokeAsync(this.onBeginLogInDelegate, new object[] {
                        client}, this.onEndLogInDelegate, this.onLogInCompletedDelegate, userState);
        }
        
        public void StartSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members) {
            base.Channel.StartSession(client, members);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartSession(client, members, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndStartSession(System.IAsyncResult result) {
            base.Channel.EndStartSession(result);
        }
        
        private System.IAsyncResult OnBeginStartSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            System.Collections.Generic.List<string> members = ((System.Collections.Generic.List<string>)(inValues[1]));
            return this.BeginStartSession(client, members, callback, asyncState);
        }
        
        private object[] OnEndStartSession(System.IAsyncResult result) {
            this.EndStartSession(result);
            return null;
        }
        
        private void OnStartSessionCompleted(object state) {
            if ((this.StartSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartSessionAsync(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members) {
            this.StartSessionAsync(client, members, null);
        }
        
        public void StartSessionAsync(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, object userState) {
            if ((this.onBeginStartSessionDelegate == null)) {
                this.onBeginStartSessionDelegate = new BeginOperationDelegate(this.OnBeginStartSession);
            }
            if ((this.onEndStartSessionDelegate == null)) {
                this.onEndStartSessionDelegate = new EndOperationDelegate(this.OnEndStartSession);
            }
            if ((this.onStartSessionCompletedDelegate == null)) {
                this.onStartSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartSessionCompleted);
            }
            base.InvokeAsync(this.onBeginStartSessionDelegate, new object[] {
                        client,
                        members}, this.onEndStartSessionDelegate, this.onStartSessionCompletedDelegate, userState);
        }
        
        public void GetAllClients() {
            base.Channel.GetAllClients();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllClients(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllClients(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetAllClients(System.IAsyncResult result) {
            base.Channel.EndGetAllClients(result);
        }
        
        private System.IAsyncResult OnBeginGetAllClients(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllClients(callback, asyncState);
        }
        
        private object[] OnEndGetAllClients(System.IAsyncResult result) {
            this.EndGetAllClients(result);
            return null;
        }
        
        private void OnGetAllClientsCompleted(object state) {
            if ((this.GetAllClientsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllClientsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllClientsAsync() {
            this.GetAllClientsAsync(null);
        }
        
        public void GetAllClientsAsync(object userState) {
            if ((this.onBeginGetAllClientsDelegate == null)) {
                this.onBeginGetAllClientsDelegate = new BeginOperationDelegate(this.OnBeginGetAllClients);
            }
            if ((this.onEndGetAllClientsDelegate == null)) {
                this.onEndGetAllClientsDelegate = new EndOperationDelegate(this.OnEndGetAllClients);
            }
            if ((this.onGetAllClientsCompletedDelegate == null)) {
                this.onGetAllClientsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllClientsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllClientsDelegate, null, this.onEndGetAllClientsDelegate, this.onGetAllClientsCompletedDelegate, userState);
        }
        
        public void EndSession(WPFClient.SVC.Client client) {
            base.Channel.EndSession(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEndSession(WPFClient.SVC.Client client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEndSession(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEndSession(System.IAsyncResult result) {
            base.Channel.EndEndSession(result);
        }
        
        private System.IAsyncResult OnBeginEndSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            return this.BeginEndSession(client, callback, asyncState);
        }
        
        private object[] OnEndEndSession(System.IAsyncResult result) {
            this.EndEndSession(result);
            return null;
        }
        
        private void OnEndSessionCompleted(object state) {
            if ((this.EndSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndSessionAsync(WPFClient.SVC.Client client) {
            this.EndSessionAsync(client, null);
        }
        
        public void EndSessionAsync(WPFClient.SVC.Client client, object userState) {
            if ((this.onBeginEndSessionDelegate == null)) {
                this.onBeginEndSessionDelegate = new BeginOperationDelegate(this.OnBeginEndSession);
            }
            if ((this.onEndEndSessionDelegate == null)) {
                this.onEndEndSessionDelegate = new EndOperationDelegate(this.OnEndEndSession);
            }
            if ((this.onEndSessionCompletedDelegate == null)) {
                this.onEndSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndSessionCompleted);
            }
            base.InvokeAsync(this.onBeginEndSessionDelegate, new object[] {
                        client}, this.onEndEndSessionDelegate, this.onEndSessionCompletedDelegate, userState);
        }
        
        public void Send(WPFClient.SVC.Message msg) {
            base.Channel.Send(msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSend(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSend(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSend(System.IAsyncResult result) {
            base.Channel.EndSend(result);
        }
        
        private System.IAsyncResult OnBeginSend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Message msg = ((WPFClient.SVC.Message)(inValues[0]));
            return this.BeginSend(msg, callback, asyncState);
        }
        
        private object[] OnEndSend(System.IAsyncResult result) {
            this.EndSend(result);
            return null;
        }
        
        private void OnSendCompleted(object state) {
            if ((this.SendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendAsync(WPFClient.SVC.Message msg) {
            this.SendAsync(msg, null);
        }
        
        public void SendAsync(WPFClient.SVC.Message msg, object userState) {
            if ((this.onBeginSendDelegate == null)) {
                this.onBeginSendDelegate = new BeginOperationDelegate(this.OnBeginSend);
            }
            if ((this.onEndSendDelegate == null)) {
                this.onEndSendDelegate = new EndOperationDelegate(this.OnEndSend);
            }
            if ((this.onSendCompletedDelegate == null)) {
                this.onSendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendCompleted);
            }
            base.InvokeAsync(this.onBeginSendDelegate, new object[] {
                        msg}, this.onEndSendDelegate, this.onSendCompletedDelegate, userState);
        }
        
        public void Whisper(WPFClient.SVC.Message msg) {
            base.Channel.Whisper(msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginWhisper(WPFClient.SVC.Message msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWhisper(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndWhisper(System.IAsyncResult result) {
            base.Channel.EndWhisper(result);
        }
        
        private System.IAsyncResult OnBeginWhisper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Message msg = ((WPFClient.SVC.Message)(inValues[0]));
            return this.BeginWhisper(msg, callback, asyncState);
        }
        
        private object[] OnEndWhisper(System.IAsyncResult result) {
            this.EndWhisper(result);
            return null;
        }
        
        private void OnWhisperCompleted(object state) {
            if ((this.WhisperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WhisperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WhisperAsync(WPFClient.SVC.Message msg) {
            this.WhisperAsync(msg, null);
        }
        
        public void WhisperAsync(WPFClient.SVC.Message msg, object userState) {
            if ((this.onBeginWhisperDelegate == null)) {
                this.onBeginWhisperDelegate = new BeginOperationDelegate(this.OnBeginWhisper);
            }
            if ((this.onEndWhisperDelegate == null)) {
                this.onEndWhisperDelegate = new EndOperationDelegate(this.OnEndWhisper);
            }
            if ((this.onWhisperCompletedDelegate == null)) {
                this.onWhisperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWhisperCompleted);
            }
            base.InvokeAsync(this.onBeginWhisperDelegate, new object[] {
                        msg}, this.onEndWhisperDelegate, this.onWhisperCompletedDelegate, userState);
        }
        
        public void AddMemberToSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members) {
            base.Channel.AddMemberToSession(client, members);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddMemberToSession(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMemberToSession(client, members, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddMemberToSession(System.IAsyncResult result) {
            base.Channel.EndAddMemberToSession(result);
        }
        
        private System.IAsyncResult OnBeginAddMemberToSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            System.Collections.Generic.List<string> members = ((System.Collections.Generic.List<string>)(inValues[1]));
            return this.BeginAddMemberToSession(client, members, callback, asyncState);
        }
        
        private object[] OnEndAddMemberToSession(System.IAsyncResult result) {
            this.EndAddMemberToSession(result);
            return null;
        }
        
        private void OnAddMemberToSessionCompleted(object state) {
            if ((this.AddMemberToSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMemberToSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMemberToSessionAsync(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members) {
            this.AddMemberToSessionAsync(client, members, null);
        }
        
        public void AddMemberToSessionAsync(WPFClient.SVC.Client client, System.Collections.Generic.List<string> members, object userState) {
            if ((this.onBeginAddMemberToSessionDelegate == null)) {
                this.onBeginAddMemberToSessionDelegate = new BeginOperationDelegate(this.OnBeginAddMemberToSession);
            }
            if ((this.onEndAddMemberToSessionDelegate == null)) {
                this.onEndAddMemberToSessionDelegate = new EndOperationDelegate(this.OnEndAddMemberToSession);
            }
            if ((this.onAddMemberToSessionCompletedDelegate == null)) {
                this.onAddMemberToSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMemberToSessionCompleted);
            }
            base.InvokeAsync(this.onBeginAddMemberToSessionDelegate, new object[] {
                        client,
                        members}, this.onEndAddMemberToSessionDelegate, this.onAddMemberToSessionCompletedDelegate, userState);
        }
        
        public void UpdateParchment(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp) {
            base.Channel.UpdateParchment(client, bmp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateParchment(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateParchment(client, bmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateParchment(System.IAsyncResult result) {
            base.Channel.EndUpdateParchment(result);
        }
        
        private System.IAsyncResult OnBeginUpdateParchment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPFClient.SVC.Client client = ((WPFClient.SVC.Client)(inValues[0]));
            System.Drawing.Bitmap bmp = ((System.Drawing.Bitmap)(inValues[1]));
            return this.BeginUpdateParchment(client, bmp, callback, asyncState);
        }
        
        private object[] OnEndUpdateParchment(System.IAsyncResult result) {
            this.EndUpdateParchment(result);
            return null;
        }
        
        private void OnUpdateParchmentCompleted(object state) {
            if ((this.UpdateParchmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateParchmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateParchmentAsync(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp) {
            this.UpdateParchmentAsync(client, bmp, null);
        }
        
        public void UpdateParchmentAsync(WPFClient.SVC.Client client, System.Drawing.Bitmap bmp, object userState) {
            if ((this.onBeginUpdateParchmentDelegate == null)) {
                this.onBeginUpdateParchmentDelegate = new BeginOperationDelegate(this.OnBeginUpdateParchment);
            }
            if ((this.onEndUpdateParchmentDelegate == null)) {
                this.onEndUpdateParchmentDelegate = new EndOperationDelegate(this.OnEndUpdateParchment);
            }
            if ((this.onUpdateParchmentCompletedDelegate == null)) {
                this.onUpdateParchmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateParchmentCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateParchmentDelegate, new object[] {
                        client,
                        bmp}, this.onEndUpdateParchmentDelegate, this.onUpdateParchmentCompletedDelegate, userState);
        }
    }
}
